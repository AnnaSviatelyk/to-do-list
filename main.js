!function(e){var t={};function n(s){if(t[s])return t[s].exports;var a=t[s]={i:s,l:!1,exports:{}};return e[s].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(s,a,function(t){return e[t]}.bind(null,a));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){},function(e,t,n){"use strict";n.r(t);n(0);const s={inputSummary:".task__description",newItem:".new-item",createNewItem:".add-new-item",input:".add-new-item__description",enableEdit:".task__name",submitBtn:".add-new-item__btn-add-task",cancelBtn:".add-new-item__btn-cancel",tasksContainer:".tasks-container",deleteBtn:".task__btn-delete",editBtn:".task__btn-edit",doneBtn:".task__btn-done",BtnsContainer:".task__btns",editBtnsContainer:".task__btns--edit",exitEditBtn:".task__btn-exit-edit",taskCheckbox:".task__checkbox_svg",taskCheckboxContainer:".task__checkbox",inputForTaskUpdate:".task__edit-input-text",taskNameWrapper:".task__name-wrapper",time:".header__data--time",date:".header__data--date"};function a(e){return e<10?`0${e}`:e}var i=class{constructor(e){this.summary=e,this.id=function(e=5){let t="";const n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",s=n.length;for(let a=0;a<e;a++)t+=n.charAt(Math.floor(Math.random()*s));return t}(5)}};const r='<i class="task__btn-done"></i>\n<i class="task__btn-exit-edit"></i>',c='<i class="task__btn-edit"></i>\n<i class="task__btn-delete"></i>',d=37,o=100;var l=class{constructor(){this.updateSummary=this.updateSummary.bind(this),this.keyPressHandler=this.keyPressHandler.bind(this),this.editBtnClickHandler=this.editBtnClickHandler.bind(this),this.documentClickHandler=this.documentClickHandler.bind(this),this.clickOnExitBtnHandler=this.clickOnExitBtnHandler.bind(this),this.checkboxDisplayHandler=this.checkboxDisplayHandler.bind(this)}addTaskToUI(e){const t=document.querySelector(s.tasksContainer),n=this.getTaskHtmlString(e);t.insertAdjacentHTML("beforeend",n);const a=document.getElementById(e.id);this.addTaskEventListeners(a)}removeTaskFromUI(e){const t=document.getElementById(e);t.style.marginLeft="-100px",t.style.opacity="0",t.style.transition="all 0.3s",t.style.transitionTimingFunction="cubic-bezier(0.42, 0, 1, 1)",setTimeout(()=>{t.parentNode.removeChild(t)},300)}addTaskEventListeners(e){e.querySelector(s.editBtn).addEventListener("click",this.editBtnClickHandler),e.querySelector(s.deleteBtn).addEventListener("click",m.deleteTask),e.querySelector(s.taskCheckbox).addEventListener("animationend",m.deleteTask)}editBtnClickHandler(e){const t=e.target.closest(".task"),n=t.querySelector(".task__name").textContent,a=e.target.closest(s.BtnsContainer);this.checkboxDisplayHandler(t),a.innerHTML=r;const i=document.getElementById(t.id).querySelector(s.taskNameWrapper),c=i.firstElementChild.offsetHeight;document.querySelector(s.doneBtn).addEventListener("click",this.updateSummary),document.querySelector(s.exitEditBtn).addEventListener("click",e=>{this.clickOnExitBtnHandler(e,n,i,a)});const d=`<textarea class="task__edit-input-text " type="text" autofocus>${n}</textarea>`;i.innerHTML=d;const l=i.firstChild;l.select(),l.addEventListener("input",this.inputHandler),document.addEventListener("click",this.documentClickHandler,!0),l.addEventListener("keypress",this.keyPressHandler);let u=Math.min(o,c);const k=parseFloat(window.getComputedStyle(l,null).getPropertyValue("padding-top"));l.style.height=u+2*k+"px"}checkboxDisplayHandler(e){const t=e.querySelector(s.taskCheckboxContainer);t.classList.contains("task__checkbox--hidden")?t.classList.remove("task__checkbox--hidden"):t.classList.add("task__checkbox--hidden")}clickOnExitBtnHandler(e,t,n,s){const a=` <span class="task__name">${t}</span>`,i=e.target.closest(".task");n.innerHTML=a,s.innerHTML=c,this.checkboxDisplayHandler(i),this.addTaskEventListeners(i),document.removeEventListener("click",this.documentClickHandler,!0)}documentClickHandler(e){const t=e.target.classList[0];["task__edit-input-text","task__btn-done","task__btn-exit-edit"].includes(t)||this.updateSummary()}inputHandler(e){const t=e.target.value;if(e.target.rows=1,e.target.style.height="auto",""===t)e.target.style.height=d+"px",e.target.classList.add("task__edit-input-text--invalid");else{const t=e.target.scrollHeight;let n=Math.min(o,t);e.target.style.height=n+"px",e.target.classList.remove("task__edit-input-text--invalid")}}keyPressHandler(e){13===e.keyCode&&(e.preventDefault(),""!==e.target.value&&this.updateSummary(e))}updateSummary(){const e=document.querySelector(s.inputForTaskUpdate),t=e.value,n=e.closest(".task"),a=n.id,i=n.querySelector(s.BtnsContainer),r=n.querySelector(s.taskNameWrapper);if(this.checkboxDisplayHandler(n),""!==t){document.removeEventListener("click",this.documentClickHandler,!0);const e=` <span class="task__name">${t}</span>`;i.innerHTML=c,r.innerHTML=e,this.addTaskEventListeners(n),m.updateTask(a,t)}}getTaskHtmlString(e){return`<div class="task" id="${e.id}">\n        <div class="task__content-wrapper">\n        <div class="task__description">\n        <label class='task__checkbox'>\n        <input type="checkbox" name="check">\n        <svg version="1.1" class="task__checkbox_svg" xmlns="http://www.w3.org/2000/svg"\n            xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100"\n            style="enable-background:new 0 0 100 100;" xml:space="preserve">\n            <polyline class="task__checkbox_line" points="3.5,45.5 40.5,82.5 95.7,15.3 "\n                stroke-linecap="round" /></svg>\n    </label>\n    \n    <div class="task__name-wrapper">\n    <span class="task__name" title="${e.summary}">${e.summary}</span>\n    </div>\n    </div>\n    <div class="task__btns">\n    <i class="task__btn-edit"></i>\n    <i class="task__btn-delete"></i>\n    </div>\n    </div>\n    <div class="line"></div></div>`}};const u=new class{constructor(){this.tasks=[]}createTask(e){const t=new i(e);return this.tasks.push(t),this.saveChangesToLocalStorage(),t}readTasks(){return this.tasks=JSON.parse(localStorage.getItem("tasks"))||[],this.tasks}deleteTask(e){const t=this.tasks.findIndex(t=>t.id===e);-1!==t&&this.tasks.splice(t,1),this.saveChangesToLocalStorage()}updateTask(e,t){this.tasks.find(t=>t.id===e).summary=t,this.saveChangesToLocalStorage()}saveChangesToLocalStorage(){localStorage.setItem("tasks",JSON.stringify(this.tasks))}},k=new l;var m=new class{createTask(e){const t=u.createTask(e);k.addTaskToUI({...t})}renderTasks(){u.readTasks().forEach(e=>k.addTaskToUI(e))}deleteTask(e){const t=e.target.closest(".task").id;u.deleteTask(t),k.removeTaskFromUI(t),u.saveChangesToLocalStorage()}updateTask(e,t){u.updateTask(e,t)}};(()=>{const e=document.querySelector(s.newItem),t=document.querySelector(s.createNewItem),n=document.querySelector(s.submitBtn);m.renderTasks(),document.querySelector(s.newItem).addEventListener("click",()=>{e.style.display="none",t.style.display="inline-block",document.querySelector(s.input).value=""});const i=n=>{n.length&&(m.createTask(n),e.style.display="inline-flex",t.style.display="none")};document.querySelector(s.submitBtn).addEventListener("click",()=>{const e=document.querySelector(s.input).value;n.classList.add("add-new-item__btn-add-task--disabled"),i(e)}),document.querySelector(s.input).addEventListener("keypress",e=>{if(13===e.keyCode){const t=e.target.value;i(t)}}),document.querySelector(s.input).addEventListener("input",()=>{n.classList.remove("add-new-item__btn-add-task--disabled")}),document.querySelector(s.cancelBtn).addEventListener("click",()=>{e.style.display="inline-flex",t.style.display="none"});const{day:r,month:c,year:d,hours:o,minutes:l}=function(){const e=new Date,t=e.getDate(),n=["January","February","March","April","May","June","July","August","September","October","November","December"][e.getMonth()],s=e.getFullYear();let i=e.getHours();i=a(i);let r=e.getMinutes();return{day:t,month:n,year:s,hours:i,minutes:r=a(r)}}();document.querySelector(s.date).textContent=`${r} ${c}, ${d}`,document.querySelector(s.time).textContent=`${o}:${l}`})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,