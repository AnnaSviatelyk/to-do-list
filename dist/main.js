!function(e){var t={};function n(s){if(t[s])return t[s].exports;var a=t[s]={i:s,l:!1,exports:{}};return e[s].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(s,a,function(t){return e[t]}.bind(null,a));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){},function(e,t,n){"use strict";n.r(t);n(0);const s={inputSummary:".task__description",newItem:".new-item",createNewItem:".add-new-item",input:".add-new-item__description",enableEdit:".task__name",submitBtn:".add-new-item__btn-add-task",cancelBtn:".add-new-item__btn-cancel",tasksContainer:".tasks-container",deleteBtn:".task__btn-delete",editBtn:".task__btn-edit",doneBtn:".task__btn-done",BtnsContainer:".task__btns",editBtnsContainer:".task__btns--edit",exitEditBtn:".task__btn-exit-edit",taskCheckbox:".task__checkbox_svg",inputForTaskUpdate:".task__edit-input-text",taskNameWrapper:".task__name-wrapper",time:".header__data--time",date:".header__data--date"};function a(e){return e<10?`0${e}`:e}var r=class{constructor(e){this.summary=e,this.id=function(e=5){let t="";const n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",s=n.length;for(let a=0;a<e;a++)t+=n.charAt(Math.floor(Math.random()*s));return t}(5)}};const i='<i class="task__btn-done"></i>\n<i class="task__btn-exit-edit"></i>',o='<i class="task__btn-edit"></i>\n<i class="task__btn-delete"></i>',d=34,l=100;var c=class{addTaskToUI(e){const t=document.querySelector(s.tasksContainer),n=this.getTaskHtmlString(e);t.insertAdjacentHTML("beforeend",n);const a=document.getElementById(e.id);this.addTaskEventListeners(a)}removeTaskFromUI(e){const t=document.getElementById(e);t.parentNode.removeChild(t)}addTaskEventListeners(e){e.querySelector(s.editBtn).addEventListener("click",this.editBtnClickHandler.bind(this)),e.querySelector(s.deleteBtn).addEventListener("click",m.deleteTask),e.querySelector(s.taskCheckbox).addEventListener("animationend",e=>{m.deleteTask(e,!0)})}editBtnClickHandler(e){const t=e.target.closest(".task"),n=t.querySelector(".task__name").textContent;e.target.closest(s.BtnsContainer).innerHTML=i;const a=document.getElementById(t.id).querySelector(s.taskNameWrapper),r=a.firstElementChild.offsetHeight,o=`<textarea class="task__edit-input-text" type="text" autofocus>${n}</textarea>`;a.innerHTML=o;const d=a.firstChild;d.select(),d.addEventListener("input",this.inputHandler),d.addEventListener("blur",this.updateSummary.bind(this)),d.addEventListener("keypress",this.keyPressHandler.bind(this));let c=Math.min(l,r);const u=parseFloat(window.getComputedStyle(d,null).getPropertyValue("padding-top"));d.style.height=c+2*u+"px"}inputHandler(e){const t=e.target.value;if(e.target.rows=1,e.target.style.height="auto",""===t)e.target.style.height=d+"px";else{const t=e.target.scrollHeight;let n=Math.min(l,t);e.target.style.height=n+"px"}}keyPressHandler(e){13===e.keyCode&&(e.preventDefault(),""!==e.target.value&&this.updateSummary(e))}updateSummary(e){const t=document.querySelector(s.inputForTaskUpdate).value,n=e.target.closest(".task"),a=n.id,r=n.querySelector(s.BtnsContainer),i=n.querySelector(s.taskNameWrapper);if(""!==t){e.target.removeEventListener("blur",this.updateSummary);const s=` <span class="task__name">${t}</span>`;r.innerHTML=o,i.innerHTML=s,this.addTaskEventListeners(n),m.updateTask(a,t)}}getTaskHtmlString(e){return`<div class="task" id="${e.id}">\n        <div class="task__content-wrapper">\n        <div class="task__description">\n        <label class='task__checkbox'>\n        <input type="checkbox" name="check">\n        <svg version="1.1" class="task__checkbox_svg" xmlns="http://www.w3.org/2000/svg"\n            xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100"\n            style="enable-background:new 0 0 100 100;" xml:space="preserve">\n            <polyline class="task__checkbox_line" points="3.5,45.5 40.5,82.5 95.7,15.3 "\n                stroke-linecap="round" /></svg>\n    </label>\n    \n    <div class="task__name-wrapper">\n    <span class="task__name" title="${e.summary}">${e.summary}</span>\n    </div>\n    </div>\n    <div class="task__btns">\n    <i class="task__btn-edit"></i>\n    <i class="task__btn-delete"></i>\n    </div>\n    </div>\n    <div class="line"></div></div>`}};const u=new class{constructor(){this.tasks=[]}createTask(e){const t=new r(e);return this.tasks.push(t),this.saveChangesToLocalStorage(),t}readTasks(){return this.tasks=JSON.parse(localStorage.getItem("tasks"))||[],this.tasks}deleteTask(e){const t=this.tasks.findIndex(t=>t.id===e);-1!==t&&this.tasks.splice(t,1),this.saveChangesToLocalStorage()}updateTask(e,t){this.tasks.find(t=>t.id===e).summary=t,this.saveChangesToLocalStorage()}saveChangesToLocalStorage(){localStorage.setItem("tasks",JSON.stringify(this.tasks))}},k=new c;var m=new class{createTask(e){const t=u.createTask(e);k.addTaskToUI({...t})}renderTasks(){u.readTasks().forEach(e=>k.addTaskToUI(e))}deleteTask(e){const t=e.target.closest(".task").id;u.deleteTask(t),k.removeTaskFromUI(t),u.saveChangesToLocalStorage()}updateTask(e,t){u.updateTask(e,t)}};(()=>{const e=document.querySelector(s.newItem),t=document.querySelector(s.createNewItem),n=document.querySelector(s.submitBtn);m.renderTasks(),document.querySelector(s.newItem).addEventListener("click",()=>{e.style.display="none",t.style.display="inline-block",document.querySelector(s.input).value=""});const r=n=>{n.length&&(m.createTask(n),e.style.display="inline-flex",t.style.display="none")};document.querySelector(s.submitBtn).addEventListener("click",()=>{const e=document.querySelector(s.input).value;n.classList.add("add-new-item__btn-add-task--disabled"),r(e)}),document.querySelector(s.input).addEventListener("keypress",e=>{if(13===e.keyCode){const t=e.target.value;r(t)}}),document.querySelector(s.input).addEventListener("input",()=>{n.classList.remove("add-new-item__btn-add-task--disabled")}),document.querySelector(s.cancelBtn).addEventListener("click",()=>{e.style.display="inline-flex",t.style.display="none"});const{day:i,month:o,year:d,hours:l,minutes:c}=function(){const e=new Date,t=e.getDate(),n=["January","February","March","April","May","June","July","August","September","October","November","December"][e.getMonth()],s=e.getFullYear();let r=e.getHours();r=a(r);let i=e.getMinutes();return{day:t,month:n,year:s,hours:r,minutes:i=a(i)}}();document.querySelector(s.date).textContent=`${i} ${o}, ${d}`,document.querySelector(s.time).textContent=`${l}:${c}`})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,